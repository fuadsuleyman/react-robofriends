{"version":3,"sources":["components/Cards.js","components/Cardlist.js","components/Search.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Cards","id","name","email","className","alt","src","Cardlist","robots","map","user","i","key","Search","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialState","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.5ff7c50b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Cards = ({id, name, email}) => {\n    return (\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img alt=\"\" src={`https://robohash.org/${id}?200*200`}/>\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n      );\n}\n\n  export default Cards;","import React from 'react';\nimport Cards from './Cards';\n\n\nconst Cardlist = ({robots}) => {\n\n return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return <Cards\n                    key={i}\n                    id={robots[i].id}\n                    name={robots[i].name}\n                    email={robots[i].email}\n                    /> \n                })\n            }    \n        </div>\n      );\n}\n \n  export default Cardlist;","import React from 'react';\n\nconst Search = ({searchfield, searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input\n            className=\"bg-light-green pa2\"\n            type=\"search\"\n            placeholder=\"search robots\"\n            onChange={searchChange}/>\n        </div>\n    );\n}\n\nexport default Search;","import React from 'react';\n\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: 'scroll', border: '2px black solid', height: '800px' }}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if(this.state.hasError){\n            return <h1>Oooops, That is not good!</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Cardlist from '../components/Cardlist';\nimport Search from '../components/Search';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions';\n\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n\n    // asagida 2 state-miz var robots ve searchfields\n    // state- ancaq class componentde yaratmaq olur\n    // state props-dan ferqli olaraq deyisile bilir\n    // redux istifade etdikden sonra construktora ehtiyac qalmadi stat-ler redux-da\n    // constructor() {\n    //     super()\n    //     this.state = {\n    //         robots: []\n    //     }\n        // redux istidade edenden sonra yuxarida field-den sildim searchField: ''\n    \n\n    // constructor-dan sonra asagidaki yuklenir linkden melumatlar goturur, robotsa verir\n    componentDidMount(){\n        // asagidakini yoxlamaq ucun qoydum, hazirki statusu gosterir\n        //console.log(this.props.store.getState());\n        // fetch('https://jsonplaceholder.typicode.com/users')\n        // .then(response => response.json())\n        // .then(users => this.setState({robots: users}));\n        // yuxaridaki 3 serte redux gelenden sonra ehtiyac qalmadi\n        this.props.onRequestRobots(); \n    }\n\n    // search hissesine yazilanlari tutur, asagida search komponentinin icine bax\n    // redux istifade edenden sonra asagidakina ehtiyac qalmadi\n    // onSearchChange = (event) => {\n    //     this.setState({ searchfields: event.target.value })\n    // }\n\n    render(){\n        // destructisation etdim ve heryerde this.state.robots ve ya this.state.searchfields yazmaga ehtiyac qalmadi \n        const {searchField, onSearchChange, robots, isPending} = this.props;\n        const filteredRobots = robots.filter( robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n        // asagidaki if le deyrikki yuxaridaki linkden melumat gec gelse, ve ya linke problem olsa ekrana bu cixsin\n        if (isPending) {\n            return <h1 className=\"tc\">Loading</h1>\n        } else {\n            return (\n                <div className=\"tc\">\n                    <h1 className=\"f2\">Robo Friends</h1>\n                    <Search className=\"bg-light-green\" searchChange={onSearchChange}/>\n                    {/* scroll elave etdim */}\n                    \n                    <ErrorBoundry>\n                        <Scroll>\n                            <Cardlist robots = { filteredRobots }/>\n                        </Scroll>\n                    </ErrorBoundry>\n                    \n                </div>\n                );\n        }\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps) (App);\n\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nconst initialState = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialState, action={}) => {\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false })\n        default:\n            return state;\n    }\n}   ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\n// kodla ishlemeyi asanlasdiri consola infolar cixarir\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\n\n// redux\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    \n      <App/>\n    \n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}